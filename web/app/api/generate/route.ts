import { NextRequest } from "next/server";

export async function POST(req: NextRequest) {
  const { type, titre, langue, pays, ton, details } = await req.json();
  const apiKey = process.env.OPENROUTER_API_KEY;
  const openaiKey = process.env.OPENAI_API_KEY;
  const demoMode = process.env.DEMO_MODE === "true";
  const siteUrl = process.env.OPENROUTER_SITE_URL || process.env.NEXT_PUBLIC_BASE_URL || req.headers.get("origin") || req.headers.get("referer") || "http://localhost:3000";
  const appTitle = process.env.OPENROUTER_APP_TITLE || "GERECHTBERG";
  const model = process.env.OPENROUTER_MODEL || "openrouter/auto";
  const openaiModel = process.env.OPENAI_MODEL || "gpt-4o-mini";
  if (!apiKey && !openaiKey && !demoMode) {
    return new Response(
      JSON.stringify({ error: "Aucune cl√© API disponible. Renseignez OPENAI_API_KEY ou OPENROUTER_API_KEY, ou activez DEMO_MODE=true pour un contenu d‚Äôexemple." }),
      { status: 400 }
    );
  }

  // Convertir code pays (FR) en nom en fran√ßais si possible
  let paysNom = pays;
  try {
    const countries = await import("i18n-iso-countries");
    const fr = (await import("i18n-iso-countries/langs/fr.json")).default;
    countries.default.registerLocale(fr as any);
    const code = (pays || "").toUpperCase();
    const name = countries.default.getName(code, "fr");
    if (name) paysNom = name;
  } catch (_) {
    // si la lib n'est pas dispo, on garde la valeur fournie
  }

  const prompt = `Vous √™tes un assistant juridique. R√©digez un ${type}${paysNom ? " pour le pays " + paysNom : ""}, en langue ${langue}${ton ? ", avec un ton " + ton : ""}. ${titre ? "Titre: " + titre + ". " : ""}${details ? "D√©tails sp√©cifiques: " + details + ". " : ""}Inclure une structure claire et des clauses pertinentes.`;

  // Mode d√©mo: retourner un contenu d'exemple sans appel externe
  if (demoMode) {
    const isCoverLetter = String(type || "").toLowerCase().includes("motivation");
    const isFrench = String(langue || "").toLowerCase().startsWith("fr");
    if (isCoverLetter && isFrench) {
      const org = /dgse/i.test(details || titre || "") ? "Direction G√©n√©rale de la S√©curit√© Ext√©rieure (DGSE)" : "votre organisme";
      const job = /drh/i.test(details || titre || "") ? "Directeur des Ressources Humaines (DRH)" : "poste cibl√©";
      const today = new Date().toLocaleDateString("fr-FR");
      const complete = [
        "Nom Pr√©nom",
        "Adresse compl√®te",
        "Courriel ‚Äî T√©l√©phone",
        "",
        `√Ä ${org}`,
        "D√©partement des Ressources Humaines",
        "Adresse",
        "",
        `√Ä ${paysNom || pays || "France"}, le ${today}`,
        "",
        `Objet : Candidature au poste de ${job}`,
        "",
        "Madame, Monsieur,",
        "",
        "Je vous adresse ma candidature pour le poste de Directeur des Ressources Humaines. Fort d‚Äôune exp√©rience confirm√©e en management RH strat√©gique, en conformit√© r√©glementaire et en pilotage de la transformation, je souhaite mettre mes comp√©tences au service d‚Äôune institution exigeante et sensible aux enjeux de souverainet√©, de s√©curit√© et d‚Äôexemplarit√© publique.",
        "",
        "Au cours de mes exp√©riences, j‚Äôai conduit des politiques RH align√©es sur le droit du travail (Code du travail, Code civil), la protection des donn√©es (RGPD), et la s√©curit√© des syst√®mes d‚Äôinformation (conformit√© eIDAS pour les processus de signature). J‚Äôai men√© des projets d‚Äôoptimisation des processus, structur√© le dialogue social, pilot√© le recrutement de profils rares et confidentiels, et instaur√© des cadres de gouvernance clairs (indicateurs, audits, gestion des risques).",
        "",
        "Ma capacit√© √† encadrer des √©quipes pluridisciplinaires, √† instaurer une culture d‚Äô√©thique, de discr√©tion et de performance, ainsi qu‚Äô√† accompagner la transformation organisationnelle, r√©pond aux exigences d‚Äôun environnement o√π l‚Äôint√©grit√©, la confidentialit√© et la rigueur op√©rationnelle sont d√©terminantes.",
        "",
        "Convaincu que des Ressources Humaines robustes sont un atout cl√© pour la continuit√© et la r√©silience, je m‚Äôengage √† garantir un haut niveau de conformit√© (RGPD), une gestion responsable des donn√©es sensibles, et une politique de recrutement/progression √©quitable et transparente.",
        "",
        "Je serais honor√© d‚Äô√©changer avec vous afin de d√©tailler mes r√©alisations et ma vision pour la fonction DRH. Vous trouverez ci‚Äëjoint mon curriculum vitae.",
        "",
        "Veuillez agr√©er, Madame, Monsieur, l‚Äôexpression de ma consid√©ration distingu√©e.",
        "",
        "Signature",
      ].join("\n");
      return Response.json({ result: complete });
    }
    const sample = [
      `Titre: ${titre || type}`,
      `Pays: ${pays || "N/A"} ‚Äî Langue: ${langue} ‚Äî Ton: ${ton || "Neutre"}`,
      "",
      "En‚Äët√™te",
      "[Vos nom et coordonn√©es]",
      "[Date]",
      "[Destinataire]",
      "",
      "Objet",
      `${titre || `R√©daction de ${type}`}`,
      "",
      "Corps",
      `Ce document est r√©dig√© pour ${pays || "le pays s√©lectionn√©"}. Il pr√©sente une structure claire et des mentions pertinentes.`,
      details ? `D√©tails fournis: ${details}` : "",
      "",
      "Cl√¥ture",
      "Veuillez agr√©er, [formule de politesse].",
    ].filter(Boolean).join("\n");
    return Response.json({ result: sample });
  }

  const chatMessages = [
    {
      role: "system",
      content: `Tu es **GERECHTBERG**, une intelligence juridique et r√©dactionnelle sp√©cialis√©e dans la cr√©ation de documents professionnels conformes au droit europ√©en.
 
 üéØ **Mission principale**
 Tu r√©diges des documents, contrats, lettres, attestations, formulaires et mod√®les administratifs adapt√©s √† la l√©gislation et aux usages des pays membres de l‚ÄôUnion europ√©enne, notamment :
 - üá©üá™ Allemagne
 - üá´üá∑ France
 - üáßüá™ Belgique
 - üáÆüáπ Italie
 - üáµüá± Pologne
 Et tout autre √âtat membre de l‚ÄôUE.
 
 ---
 
 ‚öñÔ∏è **Normes et r√©glementations √† respecter**
 1. Respecter le **RGPD (R√®glement G√©n√©ral sur la Protection des Donn√©es)** pour tout traitement de donn√©es personnelles.
 2. Int√©grer, le cas √©ch√©ant, les mentions li√©es √† **eIDAS** (signature √©lectronique et documents num√©riques).
 3. Conformer les clauses √† la **directive europ√©enne 2011/83/UE** relative aux droits des consommateurs, si applicable.
 4. Employer un **langage juridique clair, pr√©cis, professionnel et conforme** aux usages administratifs europ√©ens.
 5. Toujours adapter les r√©f√©rences juridiques, expressions et formules au **pays concern√©** (ex. Code civil fran√ßais, B√ºrgerliches Gesetzbuch en Allemagne, etc.).
 6. Aucune information ne doit contredire la l√©gislation de l‚ÄôUE ou du pays concern√©.
 7. Mentionner les **articles ou r√©f√©rences l√©gales** uniquement lorsque cela renforce la cr√©dibilit√© du document (sans surcharge).
 8. Le texte doit √™tre **directement exploitable** (aucune explication ou m√©tadonn√©e visible).
 
 ---
 
 üß± **Structure de r√©ponse attendue**
 Tu produis **uniquement le texte final complet** du document demand√©, selon la langue et le ton sp√©cifi√©s.
 Ne jamais inclure :
 - D‚Äôintroduction explicative
 - De balises techniques
 - De commentaires sur la r√©daction
 
 Chaque document doit √™tre :
 - Structur√© (titre, corps, cl√¥ture)
 - R√©dig√© dans la langue du pays cibl√©
 - Pr√™t √† √™tre copi√©-coll√© dans un format professionnel (.docx, .pdf, etc.)
 
 ---
 
 üíº **Style et ton**
 - Ton professionnel, neutre, administratif ou juridique selon le contexte.
 - Orthographe et syntaxe impeccables.
 - Adaptation culturelle et terminologique √† chaque pays (ex. ‚ÄúSoci√©t√© √† responsabilit√© limit√©e‚Äù en FR, ‚ÄúGmbH‚Äù en DE).
 
 ---
 
 üîí **Rappel d√©ontologique**
 Tu n‚Äôagis pas comme avocat, mais comme assistant de r√©daction.
 Tes contenus sont g√©n√©r√©s √† titre informatif et doivent toujours √™tre v√©rifi√©s avant usage juridique officiel.
 Tu ne fournis aucun conseil juridique personnalis√© ni interpr√©tation de lois.
 
 ---
 
 üß† **Objectif final**
 > G√©n√©rer des documents europ√©ens conformes, professionnels, coh√©rents et imm√©diatement exploitables, dans le respect des lois et standards de l‚ÄôUnion europ√©enne.`
    },
    {
      role: "user",
      content: `Donn√©es de r√©daction:\n- Type: ${type}\n- Titre: ${titre || type}\n- Langue: ${langue}\n- Pays: ${paysNom || pays || "non pr√©cis√©"}\n- Ton: ${ton || "Professionnel"}\n- D√©tails: ${details || "Aucun"}\n\nConsignes:\n- Respecter strictement les r√®gles du message syst√®me.\n- Adapter au pays et au droit europ√©en (RGPD/eIDAS).\n- Renvoie uniquement le texte final du document complet, sans introduction, balises ou explications.`
    },
  ];

  let r: Response;
  if (openaiKey) {
    r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${openaiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: openaiModel,
        messages: chatMessages,
        temperature: 0.3,
      }),
    });
  } else {
    r = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${apiKey}`,
        "Content-Type": "application/json",
        "HTTP-Referer": siteUrl,
        "X-Title": appTitle,
      },
      body: JSON.stringify({
        model,
        messages: chatMessages,
        temperature: 0.3,
        stream: false,
      }),
    });
  }

  if (!r.ok) {
    const errText = await r.text();
    const provider = openaiKey ? "openai" : "openrouter";
    if (r.status === 402 && provider === "openrouter") {
      let reason: "insufficient_credits" | "invalid_key" | "unknown" = "insufficient_credits";
      try {
        const parsed = JSON.parse(errText);
        const s = JSON.stringify(parsed).toLowerCase();
        if (s.includes("invalid") && s.includes("key")) reason = "invalid_key";
        else if (s.includes("missing") && s.includes("key")) reason = "invalid_key";
        else if (s.includes("payment") || s.includes("credit")) reason = "insufficient_credits";
        else reason = "unknown";
      } catch (_) {
        const s = (errText || "").toLowerCase();
        if (s.includes("invalid") && s.includes("key")) reason = "invalid_key";
        else if (s.includes("missing") && s.includes("key")) reason = "invalid_key";
        else if (s.includes("payment") || s.includes("credit")) reason = "insufficient_credits";
        else reason = "unknown";
      }
      const msg = reason === "invalid_key"
        ? `Cl√© ${provider} invalide. V√©rifiez la cl√© API.`
        : reason === "insufficient_credits"
          ? `Cr√©dits ${provider} insuffisants. Ajoutez des cr√©dits √† votre compte.`
          : "Service de r√©daction indisponible. Consultez le d√©tail et r√©essayez.";
      return new Response(
        JSON.stringify({
          error: msg,
          reason,
          provider,
          detail: errText,
        }),
        { status: 402 }
      );
    }
    return new Response(JSON.stringify({ error: errText || "Erreur du fournisseur IA", provider }), { status: r.status });
  }
  const json = await r.json();
  const result = json?.choices?.[0]?.message?.content ?? "";
  return Response.json({ result });
}